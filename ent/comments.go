// Code generated by entc, DO NOT EDIT.

package ent

import (
	"LifeDocs/ent/comments"
	"LifeDocs/ent/experience"
	"LifeDocs/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Comments is the model entity for the Comments schema.
type Comments struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Comment holds the value of the "comment" field.
	Comment string `json:"comment,omitempty"`
	// Likes holds the value of the "likes" field.
	Likes int `json:"likes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentsQuery when eager-loading is set.
	Edges               CommentsEdges `json:"edges"`
	experience_comments *int
	user_comments       *int
}

// CommentsEdges holds the relations/edges for other nodes in the graph.
type CommentsEdges struct {
	// Posts holds the value of the posts edge.
	Posts *Experience `json:"posts,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentsEdges) PostsOrErr() (*Experience, error) {
	if e.loadedTypes[0] {
		if e.Posts == nil {
			// The edge posts was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: experience.Label}
		}
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentsEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comments) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case comments.FieldID, comments.FieldLikes:
			values[i] = new(sql.NullInt64)
		case comments.FieldComment:
			values[i] = new(sql.NullString)
		case comments.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case comments.FieldUUID:
			values[i] = new(uuid.UUID)
		case comments.ForeignKeys[0]: // experience_comments
			values[i] = new(sql.NullInt64)
		case comments.ForeignKeys[1]: // user_comments
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Comments", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comments fields.
func (c *Comments) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comments.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case comments.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				c.UUID = *value
			}
		case comments.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case comments.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				c.Comment = value.String
			}
		case comments.FieldLikes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field likes", values[i])
			} else if value.Valid {
				c.Likes = int(value.Int64)
			}
		case comments.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field experience_comments", value)
			} else if value.Valid {
				c.experience_comments = new(int)
				*c.experience_comments = int(value.Int64)
			}
		case comments.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_comments", value)
			} else if value.Valid {
				c.user_comments = new(int)
				*c.user_comments = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPosts queries the "posts" edge of the Comments entity.
func (c *Comments) QueryPosts() *ExperienceQuery {
	return (&CommentsClient{config: c.config}).QueryPosts(c)
}

// QueryUser queries the "user" edge of the Comments entity.
func (c *Comments) QueryUser() *UserQuery {
	return (&CommentsClient{config: c.config}).QueryUser(c)
}

// Update returns a builder for updating this Comments.
// Note that you need to call Comments.Unwrap() before calling this method if this Comments
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comments) Update() *CommentsUpdateOne {
	return (&CommentsClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Comments entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comments) Unwrap() *Comments {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Comments is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comments) String() string {
	var builder strings.Builder
	builder.WriteString("Comments(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", c.UUID))
	builder.WriteString(", created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", comment=")
	builder.WriteString(c.Comment)
	builder.WriteString(", likes=")
	builder.WriteString(fmt.Sprintf("%v", c.Likes))
	builder.WriteByte(')')
	return builder.String()
}

// CommentsSlice is a parsable slice of Comments.
type CommentsSlice []*Comments

func (c CommentsSlice) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
