// Code generated by entc, DO NOT EDIT.

package comments

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the comments type in the database.
	Label = "comments"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldLikes holds the string denoting the likes field in the database.
	FieldLikes = "likes"
	// EdgePosts holds the string denoting the posts edge name in mutations.
	EdgePosts = "posts"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the comments in the database.
	Table = "comments"
	// PostsTable is the table that holds the posts relation/edge.
	PostsTable = "comments"
	// PostsInverseTable is the table name for the Experience entity.
	// It exists in this package in order to avoid circular dependency with the "experience" package.
	PostsInverseTable = "experiences"
	// PostsColumn is the table column denoting the posts relation/edge.
	PostsColumn = "experience_comments"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "comments"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_comments"
)

// Columns holds all SQL columns for comments fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCreatedAt,
	FieldComment,
	FieldLikes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "comments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"experience_comments",
	"user_comments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() uuid.UUID
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// CommentValidator is a validator for the "comment" field. It is called by the builders before save.
	CommentValidator func(string) error
	// LikesValidator is a validator for the "likes" field. It is called by the builders before save.
	LikesValidator func(int) error
)
