// Code generated by entc, DO NOT EDIT.

package ent

import (
	"LifeDocs/ent/comments"
	"LifeDocs/ent/experience"
	"LifeDocs/ent/predicate"
	"LifeDocs/ent/user"
	"context"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ExperienceUpdate is the builder for updating Experience entities.
type ExperienceUpdate struct {
	config
	hooks    []Hook
	mutation *ExperienceMutation
}

// Where appends a list predicates to the ExperienceUpdate builder.
func (eu *ExperienceUpdate) Where(ps ...predicate.Experience) *ExperienceUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetUUID sets the "uuid" field.
func (eu *ExperienceUpdate) SetUUID(u uuid.UUID) *ExperienceUpdate {
	eu.mutation.SetUUID(u)
	return eu
}

// SetCreatedAt sets the "created_at" field.
func (eu *ExperienceUpdate) SetCreatedAt(t time.Time) *ExperienceUpdate {
	eu.mutation.SetCreatedAt(t)
	return eu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableCreatedAt(t *time.Time) *ExperienceUpdate {
	if t != nil {
		eu.SetCreatedAt(*t)
	}
	return eu
}

// SetTitle sets the "title" field.
func (eu *ExperienceUpdate) SetTitle(s string) *ExperienceUpdate {
	eu.mutation.SetTitle(s)
	return eu
}

// SetContent sets the "content" field.
func (eu *ExperienceUpdate) SetContent(s string) *ExperienceUpdate {
	eu.mutation.SetContent(s)
	return eu
}

// SetViews sets the "views" field.
func (eu *ExperienceUpdate) SetViews(i int) *ExperienceUpdate {
	eu.mutation.ResetViews()
	eu.mutation.SetViews(i)
	return eu
}

// AddViews adds i to the "views" field.
func (eu *ExperienceUpdate) AddViews(i int) *ExperienceUpdate {
	eu.mutation.AddViews(i)
	return eu
}

// SetLikes sets the "likes" field.
func (eu *ExperienceUpdate) SetLikes(i int) *ExperienceUpdate {
	eu.mutation.ResetLikes()
	eu.mutation.SetLikes(i)
	return eu
}

// AddLikes adds i to the "likes" field.
func (eu *ExperienceUpdate) AddLikes(i int) *ExperienceUpdate {
	eu.mutation.AddLikes(i)
	return eu
}

// AddCommentIDs adds the "comments" edge to the Comments entity by IDs.
func (eu *ExperienceUpdate) AddCommentIDs(ids ...int) *ExperienceUpdate {
	eu.mutation.AddCommentIDs(ids...)
	return eu
}

// AddComments adds the "comments" edges to the Comments entity.
func (eu *ExperienceUpdate) AddComments(c ...*Comments) *ExperienceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.AddCommentIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (eu *ExperienceUpdate) SetUserID(id int) *ExperienceUpdate {
	eu.mutation.SetUserID(id)
	return eu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (eu *ExperienceUpdate) SetNillableUserID(id *int) *ExperienceUpdate {
	if id != nil {
		eu = eu.SetUserID(*id)
	}
	return eu
}

// SetUser sets the "user" edge to the User entity.
func (eu *ExperienceUpdate) SetUser(u *User) *ExperienceUpdate {
	return eu.SetUserID(u.ID)
}

// Mutation returns the ExperienceMutation object of the builder.
func (eu *ExperienceUpdate) Mutation() *ExperienceMutation {
	return eu.mutation
}

// ClearComments clears all "comments" edges to the Comments entity.
func (eu *ExperienceUpdate) ClearComments() *ExperienceUpdate {
	eu.mutation.ClearComments()
	return eu
}

// RemoveCommentIDs removes the "comments" edge to Comments entities by IDs.
func (eu *ExperienceUpdate) RemoveCommentIDs(ids ...int) *ExperienceUpdate {
	eu.mutation.RemoveCommentIDs(ids...)
	return eu
}

// RemoveComments removes "comments" edges to Comments entities.
func (eu *ExperienceUpdate) RemoveComments(c ...*Comments) *ExperienceUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return eu.RemoveCommentIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (eu *ExperienceUpdate) ClearUser() *ExperienceUpdate {
	eu.mutation.ClearUser()
	return eu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExperienceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExperienceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExperienceUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExperienceUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExperienceUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExperienceUpdate) check() error {
	if v, ok := eu.mutation.Title(); ok {
		if err := experience.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Content(); ok {
		if err := experience.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Views(); ok {
		if err := experience.ViewsValidator(v); err != nil {
			return &ValidationError{Name: "views", err: fmt.Errorf("ent: validator failed for field \"views\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Likes(); ok {
		if err := experience.LikesValidator(v); err != nil {
			return &ValidationError{Name: "likes", err: fmt.Errorf("ent: validator failed for field \"likes\": %w", err)}
		}
	}
	return nil
}

func (eu *ExperienceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   experience.Table,
			Columns: experience.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: experience.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: experience.FieldUUID,
		})
	}
	if value, ok := eu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: experience.FieldCreatedAt,
		})
	}
	if value, ok := eu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: experience.FieldTitle,
		})
	}
	if value, ok := eu.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: experience.FieldContent,
		})
	}
	if value, ok := eu.mutation.Views(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: experience.FieldViews,
		})
	}
	if value, ok := eu.mutation.AddedViews(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: experience.FieldViews,
		})
	}
	if value, ok := eu.mutation.Likes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: experience.FieldLikes,
		})
	}
	if value, ok := eu.mutation.AddedLikes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: experience.FieldLikes,
		})
	}
	if eu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   experience.CommentsTable,
			Columns: []string{experience.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comments.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !eu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   experience.CommentsTable,
			Columns: []string{experience.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comments.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   experience.CommentsTable,
			Columns: []string{experience.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comments.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if eu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   experience.UserTable,
			Columns: []string{experience.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := eu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   experience.UserTable,
			Columns: []string{experience.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{experience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ExperienceUpdateOne is the builder for updating a single Experience entity.
type ExperienceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExperienceMutation
}

// SetUUID sets the "uuid" field.
func (euo *ExperienceUpdateOne) SetUUID(u uuid.UUID) *ExperienceUpdateOne {
	euo.mutation.SetUUID(u)
	return euo
}

// SetCreatedAt sets the "created_at" field.
func (euo *ExperienceUpdateOne) SetCreatedAt(t time.Time) *ExperienceUpdateOne {
	euo.mutation.SetCreatedAt(t)
	return euo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableCreatedAt(t *time.Time) *ExperienceUpdateOne {
	if t != nil {
		euo.SetCreatedAt(*t)
	}
	return euo
}

// SetTitle sets the "title" field.
func (euo *ExperienceUpdateOne) SetTitle(s string) *ExperienceUpdateOne {
	euo.mutation.SetTitle(s)
	return euo
}

// SetContent sets the "content" field.
func (euo *ExperienceUpdateOne) SetContent(s string) *ExperienceUpdateOne {
	euo.mutation.SetContent(s)
	return euo
}

// SetViews sets the "views" field.
func (euo *ExperienceUpdateOne) SetViews(i int) *ExperienceUpdateOne {
	euo.mutation.ResetViews()
	euo.mutation.SetViews(i)
	return euo
}

// AddViews adds i to the "views" field.
func (euo *ExperienceUpdateOne) AddViews(i int) *ExperienceUpdateOne {
	euo.mutation.AddViews(i)
	return euo
}

// SetLikes sets the "likes" field.
func (euo *ExperienceUpdateOne) SetLikes(i int) *ExperienceUpdateOne {
	euo.mutation.ResetLikes()
	euo.mutation.SetLikes(i)
	return euo
}

// AddLikes adds i to the "likes" field.
func (euo *ExperienceUpdateOne) AddLikes(i int) *ExperienceUpdateOne {
	euo.mutation.AddLikes(i)
	return euo
}

// AddCommentIDs adds the "comments" edge to the Comments entity by IDs.
func (euo *ExperienceUpdateOne) AddCommentIDs(ids ...int) *ExperienceUpdateOne {
	euo.mutation.AddCommentIDs(ids...)
	return euo
}

// AddComments adds the "comments" edges to the Comments entity.
func (euo *ExperienceUpdateOne) AddComments(c ...*Comments) *ExperienceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.AddCommentIDs(ids...)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (euo *ExperienceUpdateOne) SetUserID(id int) *ExperienceUpdateOne {
	euo.mutation.SetUserID(id)
	return euo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (euo *ExperienceUpdateOne) SetNillableUserID(id *int) *ExperienceUpdateOne {
	if id != nil {
		euo = euo.SetUserID(*id)
	}
	return euo
}

// SetUser sets the "user" edge to the User entity.
func (euo *ExperienceUpdateOne) SetUser(u *User) *ExperienceUpdateOne {
	return euo.SetUserID(u.ID)
}

// Mutation returns the ExperienceMutation object of the builder.
func (euo *ExperienceUpdateOne) Mutation() *ExperienceMutation {
	return euo.mutation
}

// ClearComments clears all "comments" edges to the Comments entity.
func (euo *ExperienceUpdateOne) ClearComments() *ExperienceUpdateOne {
	euo.mutation.ClearComments()
	return euo
}

// RemoveCommentIDs removes the "comments" edge to Comments entities by IDs.
func (euo *ExperienceUpdateOne) RemoveCommentIDs(ids ...int) *ExperienceUpdateOne {
	euo.mutation.RemoveCommentIDs(ids...)
	return euo
}

// RemoveComments removes "comments" edges to Comments entities.
func (euo *ExperienceUpdateOne) RemoveComments(c ...*Comments) *ExperienceUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return euo.RemoveCommentIDs(ids...)
}

// ClearUser clears the "user" edge to the User entity.
func (euo *ExperienceUpdateOne) ClearUser() *ExperienceUpdateOne {
	euo.mutation.ClearUser()
	return euo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExperienceUpdateOne) Select(field string, fields ...string) *ExperienceUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Experience entity.
func (euo *ExperienceUpdateOne) Save(ctx context.Context) (*Experience, error) {
	var (
		err  error
		node *Experience
	)
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExperienceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExperienceUpdateOne) SaveX(ctx context.Context) *Experience {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExperienceUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExperienceUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExperienceUpdateOne) check() error {
	if v, ok := euo.mutation.Title(); ok {
		if err := experience.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Content(); ok {
		if err := experience.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf("ent: validator failed for field \"content\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Views(); ok {
		if err := experience.ViewsValidator(v); err != nil {
			return &ValidationError{Name: "views", err: fmt.Errorf("ent: validator failed for field \"views\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Likes(); ok {
		if err := experience.LikesValidator(v); err != nil {
			return &ValidationError{Name: "likes", err: fmt.Errorf("ent: validator failed for field \"likes\": %w", err)}
		}
	}
	return nil
}

func (euo *ExperienceUpdateOne) sqlSave(ctx context.Context) (_node *Experience, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   experience.Table,
			Columns: experience.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: experience.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Experience.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, experience.FieldID)
		for _, f := range fields {
			if !experience.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != experience.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.UUID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: experience.FieldUUID,
		})
	}
	if value, ok := euo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: experience.FieldCreatedAt,
		})
	}
	if value, ok := euo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: experience.FieldTitle,
		})
	}
	if value, ok := euo.mutation.Content(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: experience.FieldContent,
		})
	}
	if value, ok := euo.mutation.Views(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: experience.FieldViews,
		})
	}
	if value, ok := euo.mutation.AddedViews(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: experience.FieldViews,
		})
	}
	if value, ok := euo.mutation.Likes(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: experience.FieldLikes,
		})
	}
	if value, ok := euo.mutation.AddedLikes(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: experience.FieldLikes,
		})
	}
	if euo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   experience.CommentsTable,
			Columns: []string{experience.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comments.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !euo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   experience.CommentsTable,
			Columns: []string{experience.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comments.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   experience.CommentsTable,
			Columns: []string{experience.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: comments.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if euo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   experience.UserTable,
			Columns: []string{experience.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := euo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   experience.UserTable,
			Columns: []string{experience.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Experience{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{experience.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
