// Code generated by entc, DO NOT EDIT.

package experience

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the experience type in the database.
	Label = "experience"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUUID holds the string denoting the uuid field in the database.
	FieldUUID = "uuid"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldViews holds the string denoting the views field in the database.
	FieldViews = "views"
	// FieldLikes holds the string denoting the likes field in the database.
	FieldLikes = "likes"
	// EdgeComments holds the string denoting the comments edge name in mutations.
	EdgeComments = "comments"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// Table holds the table name of the experience in the database.
	Table = "experiences"
	// CommentsTable is the table that holds the comments relation/edge.
	CommentsTable = "comments"
	// CommentsInverseTable is the table name for the Comments entity.
	// It exists in this package in order to avoid circular dependency with the "comments" package.
	CommentsInverseTable = "comments"
	// CommentsColumn is the table column denoting the comments relation/edge.
	CommentsColumn = "experience_comments"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "experiences"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_posts"
)

// Columns holds all SQL columns for experience fields.
var Columns = []string{
	FieldID,
	FieldUUID,
	FieldCreatedAt,
	FieldTitle,
	FieldContent,
	FieldViews,
	FieldLikes,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "experiences"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_posts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUUID holds the default value on creation for the "uuid" field.
	DefaultUUID func() uuid.UUID
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// ViewsValidator is a validator for the "views" field. It is called by the builders before save.
	ViewsValidator func(int) error
	// LikesValidator is a validator for the "likes" field. It is called by the builders before save.
	LikesValidator func(int) error
)
