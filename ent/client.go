// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"LifeDocs/ent/migrate"

	"LifeDocs/ent/comments"
	"LifeDocs/ent/experience"
	"LifeDocs/ent/tags"
	"LifeDocs/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Comments is the client for interacting with the Comments builders.
	Comments *CommentsClient
	// Experience is the client for interacting with the Experience builders.
	Experience *ExperienceClient
	// Tags is the client for interacting with the Tags builders.
	Tags *TagsClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Comments = NewCommentsClient(c.config)
	c.Experience = NewExperienceClient(c.config)
	c.Tags = NewTagsClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		Comments:   NewCommentsClient(cfg),
		Experience: NewExperienceClient(cfg),
		Tags:       NewTagsClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:     cfg,
		Comments:   NewCommentsClient(cfg),
		Experience: NewExperienceClient(cfg),
		Tags:       NewTagsClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Comments.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Comments.Use(hooks...)
	c.Experience.Use(hooks...)
	c.Tags.Use(hooks...)
	c.User.Use(hooks...)
}

// CommentsClient is a client for the Comments schema.
type CommentsClient struct {
	config
}

// NewCommentsClient returns a client for the Comments from the given config.
func NewCommentsClient(c config) *CommentsClient {
	return &CommentsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `comments.Hooks(f(g(h())))`.
func (c *CommentsClient) Use(hooks ...Hook) {
	c.hooks.Comments = append(c.hooks.Comments, hooks...)
}

// Create returns a create builder for Comments.
func (c *CommentsClient) Create() *CommentsCreate {
	mutation := newCommentsMutation(c.config, OpCreate)
	return &CommentsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Comments entities.
func (c *CommentsClient) CreateBulk(builders ...*CommentsCreate) *CommentsCreateBulk {
	return &CommentsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Comments.
func (c *CommentsClient) Update() *CommentsUpdate {
	mutation := newCommentsMutation(c.config, OpUpdate)
	return &CommentsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CommentsClient) UpdateOne(co *Comments) *CommentsUpdateOne {
	mutation := newCommentsMutation(c.config, OpUpdateOne, withComments(co))
	return &CommentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CommentsClient) UpdateOneID(id int) *CommentsUpdateOne {
	mutation := newCommentsMutation(c.config, OpUpdateOne, withCommentsID(id))
	return &CommentsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Comments.
func (c *CommentsClient) Delete() *CommentsDelete {
	mutation := newCommentsMutation(c.config, OpDelete)
	return &CommentsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CommentsClient) DeleteOne(co *Comments) *CommentsDeleteOne {
	return c.DeleteOneID(co.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CommentsClient) DeleteOneID(id int) *CommentsDeleteOne {
	builder := c.Delete().Where(comments.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CommentsDeleteOne{builder}
}

// Query returns a query builder for Comments.
func (c *CommentsClient) Query() *CommentsQuery {
	return &CommentsQuery{
		config: c.config,
	}
}

// Get returns a Comments entity by its id.
func (c *CommentsClient) Get(ctx context.Context, id int) (*Comments, error) {
	return c.Query().Where(comments.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CommentsClient) GetX(ctx context.Context, id int) *Comments {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPosts queries the posts edge of a Comments.
func (c *CommentsClient) QueryPosts(co *Comments) *ExperienceQuery {
	query := &ExperienceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comments.Table, comments.FieldID, id),
			sqlgraph.To(experience.Table, experience.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, comments.PostsTable, comments.PostsColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Comments.
func (c *CommentsClient) QueryUser(co *Comments) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := co.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(comments.Table, comments.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, comments.UserTable, comments.UserColumn),
		)
		fromV = sqlgraph.Neighbors(co.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *CommentsClient) Hooks() []Hook {
	return c.hooks.Comments
}

// ExperienceClient is a client for the Experience schema.
type ExperienceClient struct {
	config
}

// NewExperienceClient returns a client for the Experience from the given config.
func NewExperienceClient(c config) *ExperienceClient {
	return &ExperienceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `experience.Hooks(f(g(h())))`.
func (c *ExperienceClient) Use(hooks ...Hook) {
	c.hooks.Experience = append(c.hooks.Experience, hooks...)
}

// Create returns a create builder for Experience.
func (c *ExperienceClient) Create() *ExperienceCreate {
	mutation := newExperienceMutation(c.config, OpCreate)
	return &ExperienceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Experience entities.
func (c *ExperienceClient) CreateBulk(builders ...*ExperienceCreate) *ExperienceCreateBulk {
	return &ExperienceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Experience.
func (c *ExperienceClient) Update() *ExperienceUpdate {
	mutation := newExperienceMutation(c.config, OpUpdate)
	return &ExperienceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExperienceClient) UpdateOne(e *Experience) *ExperienceUpdateOne {
	mutation := newExperienceMutation(c.config, OpUpdateOne, withExperience(e))
	return &ExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExperienceClient) UpdateOneID(id int) *ExperienceUpdateOne {
	mutation := newExperienceMutation(c.config, OpUpdateOne, withExperienceID(id))
	return &ExperienceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Experience.
func (c *ExperienceClient) Delete() *ExperienceDelete {
	mutation := newExperienceMutation(c.config, OpDelete)
	return &ExperienceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ExperienceClient) DeleteOne(e *Experience) *ExperienceDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ExperienceClient) DeleteOneID(id int) *ExperienceDeleteOne {
	builder := c.Delete().Where(experience.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExperienceDeleteOne{builder}
}

// Query returns a query builder for Experience.
func (c *ExperienceClient) Query() *ExperienceQuery {
	return &ExperienceQuery{
		config: c.config,
	}
}

// Get returns a Experience entity by its id.
func (c *ExperienceClient) Get(ctx context.Context, id int) (*Experience, error) {
	return c.Query().Where(experience.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExperienceClient) GetX(ctx context.Context, id int) *Experience {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryComments queries the comments edge of a Experience.
func (c *ExperienceClient) QueryComments(e *Experience) *CommentsQuery {
	query := &CommentsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(experience.Table, experience.FieldID, id),
			sqlgraph.To(comments.Table, comments.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, experience.CommentsTable, experience.CommentsColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a Experience.
func (c *ExperienceClient) QueryUser(e *Experience) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(experience.Table, experience.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, experience.UserTable, experience.UserColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExperienceClient) Hooks() []Hook {
	return c.hooks.Experience
}

// TagsClient is a client for the Tags schema.
type TagsClient struct {
	config
}

// NewTagsClient returns a client for the Tags from the given config.
func NewTagsClient(c config) *TagsClient {
	return &TagsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tags.Hooks(f(g(h())))`.
func (c *TagsClient) Use(hooks ...Hook) {
	c.hooks.Tags = append(c.hooks.Tags, hooks...)
}

// Create returns a create builder for Tags.
func (c *TagsClient) Create() *TagsCreate {
	mutation := newTagsMutation(c.config, OpCreate)
	return &TagsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tags entities.
func (c *TagsClient) CreateBulk(builders ...*TagsCreate) *TagsCreateBulk {
	return &TagsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tags.
func (c *TagsClient) Update() *TagsUpdate {
	mutation := newTagsMutation(c.config, OpUpdate)
	return &TagsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagsClient) UpdateOne(t *Tags) *TagsUpdateOne {
	mutation := newTagsMutation(c.config, OpUpdateOne, withTags(t))
	return &TagsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagsClient) UpdateOneID(id int) *TagsUpdateOne {
	mutation := newTagsMutation(c.config, OpUpdateOne, withTagsID(id))
	return &TagsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tags.
func (c *TagsClient) Delete() *TagsDelete {
	mutation := newTagsMutation(c.config, OpDelete)
	return &TagsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TagsClient) DeleteOne(t *Tags) *TagsDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TagsClient) DeleteOneID(id int) *TagsDeleteOne {
	builder := c.Delete().Where(tags.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagsDeleteOne{builder}
}

// Query returns a query builder for Tags.
func (c *TagsClient) Query() *TagsQuery {
	return &TagsQuery{
		config: c.config,
	}
}

// Get returns a Tags entity by its id.
func (c *TagsClient) Get(ctx context.Context, id int) (*Tags, error) {
	return c.Query().Where(tags.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagsClient) GetX(ctx context.Context, id int) *Tags {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TagsClient) Hooks() []Hook {
	return c.hooks.Tags
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryComments queries the comments edge of a User.
func (c *UserClient) QueryComments(u *User) *CommentsQuery {
	query := &CommentsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(comments.Table, comments.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CommentsTable, user.CommentsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPosts queries the posts edge of a User.
func (c *UserClient) QueryPosts(u *User) *ExperienceQuery {
	query := &ExperienceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(experience.Table, experience.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PostsTable, user.PostsColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
