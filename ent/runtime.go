// Code generated by entc, DO NOT EDIT.

package ent

import (
	"LifeDocs/ent/comments"
	"LifeDocs/ent/experience"
	"LifeDocs/ent/schema"
	"LifeDocs/ent/tags"
	"LifeDocs/ent/user"
	"time"

	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	commentsFields := schema.Comments{}.Fields()
	_ = commentsFields
	// commentsDescUUID is the schema descriptor for uuid field.
	commentsDescUUID := commentsFields[0].Descriptor()
	// comments.DefaultUUID holds the default value on creation for the uuid field.
	comments.DefaultUUID = commentsDescUUID.Default.(func() uuid.UUID)
	// commentsDescCreatedAt is the schema descriptor for created_at field.
	commentsDescCreatedAt := commentsFields[1].Descriptor()
	// comments.DefaultCreatedAt holds the default value on creation for the created_at field.
	comments.DefaultCreatedAt = commentsDescCreatedAt.Default.(func() time.Time)
	// commentsDescComment is the schema descriptor for comment field.
	commentsDescComment := commentsFields[2].Descriptor()
	// comments.CommentValidator is a validator for the "comment" field. It is called by the builders before save.
	comments.CommentValidator = commentsDescComment.Validators[0].(func(string) error)
	// commentsDescLikes is the schema descriptor for likes field.
	commentsDescLikes := commentsFields[3].Descriptor()
	// comments.LikesValidator is a validator for the "likes" field. It is called by the builders before save.
	comments.LikesValidator = commentsDescLikes.Validators[0].(func(int) error)
	experienceFields := schema.Experience{}.Fields()
	_ = experienceFields
	// experienceDescUUID is the schema descriptor for uuid field.
	experienceDescUUID := experienceFields[0].Descriptor()
	// experience.DefaultUUID holds the default value on creation for the uuid field.
	experience.DefaultUUID = experienceDescUUID.Default.(func() uuid.UUID)
	// experienceDescCreatedAt is the schema descriptor for created_at field.
	experienceDescCreatedAt := experienceFields[1].Descriptor()
	// experience.DefaultCreatedAt holds the default value on creation for the created_at field.
	experience.DefaultCreatedAt = experienceDescCreatedAt.Default.(func() time.Time)
	// experienceDescTitle is the schema descriptor for title field.
	experienceDescTitle := experienceFields[2].Descriptor()
	// experience.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	experience.TitleValidator = func() func(string) error {
		validators := experienceDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// experienceDescContent is the schema descriptor for content field.
	experienceDescContent := experienceFields[3].Descriptor()
	// experience.ContentValidator is a validator for the "content" field. It is called by the builders before save.
	experience.ContentValidator = experienceDescContent.Validators[0].(func(string) error)
	// experienceDescViews is the schema descriptor for views field.
	experienceDescViews := experienceFields[4].Descriptor()
	// experience.ViewsValidator is a validator for the "views" field. It is called by the builders before save.
	experience.ViewsValidator = experienceDescViews.Validators[0].(func(int) error)
	// experienceDescLikes is the schema descriptor for likes field.
	experienceDescLikes := experienceFields[5].Descriptor()
	// experience.LikesValidator is a validator for the "likes" field. It is called by the builders before save.
	experience.LikesValidator = experienceDescLikes.Validators[0].(func(int) error)
	tagsFields := schema.Tags{}.Fields()
	_ = tagsFields
	// tagsDescTag is the schema descriptor for tag field.
	tagsDescTag := tagsFields[0].Descriptor()
	// tags.TagValidator is a validator for the "tag" field. It is called by the builders before save.
	tags.TagValidator = func() func(string) error {
		validators := tagsDescTag.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(tag string) error {
			for _, fn := range fns {
				if err := fn(tag); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUUID is the schema descriptor for uuid field.
	userDescUUID := userFields[0].Descriptor()
	// user.DefaultUUID holds the default value on creation for the uuid field.
	user.DefaultUUID = userDescUUID.Default.(func() uuid.UUID)
	// userDescLastName is the schema descriptor for lastName field.
	userDescLastName := userFields[1].Descriptor()
	// user.LastNameValidator is a validator for the "lastName" field. It is called by the builders before save.
	user.LastNameValidator = userDescLastName.Validators[0].(func(string) error)
	// userDescFirstName is the schema descriptor for firstName field.
	userDescFirstName := userFields[2].Descriptor()
	// user.FirstNameValidator is a validator for the "firstName" field. It is called by the builders before save.
	user.FirstNameValidator = userDescFirstName.Validators[0].(func(string) error)
	// userDescAge is the schema descriptor for age field.
	userDescAge := userFields[3].Descriptor()
	// user.AgeValidator is a validator for the "age" field. It is called by the builders before save.
	user.AgeValidator = userDescAge.Validators[0].(func(int) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[5].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[6].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
}
