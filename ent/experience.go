// Code generated by entc, DO NOT EDIT.

package ent

import (
	"LifeDocs/ent/experience"
	"LifeDocs/ent/user"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Experience is the model entity for the Experience schema.
type Experience struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UUID holds the value of the "uuid" field.
	UUID uuid.UUID `json:"uuid,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// Views holds the value of the "views" field.
	Views int `json:"views,omitempty"`
	// Likes holds the value of the "likes" field.
	Likes int `json:"likes,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ExperienceQuery when eager-loading is set.
	Edges      ExperienceEdges `json:"edges"`
	user_posts *int
}

// ExperienceEdges holds the relations/edges for other nodes in the graph.
type ExperienceEdges struct {
	// Comments holds the value of the comments edge.
	Comments []*Comments `json:"comments,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e ExperienceEdges) CommentsOrErr() ([]*Comments, error) {
	if e.loadedTypes[0] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ExperienceEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Experience) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case experience.FieldID, experience.FieldViews, experience.FieldLikes:
			values[i] = new(sql.NullInt64)
		case experience.FieldTitle, experience.FieldContent:
			values[i] = new(sql.NullString)
		case experience.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case experience.FieldUUID:
			values[i] = new(uuid.UUID)
		case experience.ForeignKeys[0]: // user_posts
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Experience", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Experience fields.
func (e *Experience) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case experience.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			e.ID = int(value.Int64)
		case experience.FieldUUID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value != nil {
				e.UUID = *value
			}
		case experience.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				e.CreatedAt = value.Time
			}
		case experience.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				e.Title = value.String
			}
		case experience.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				e.Content = value.String
			}
		case experience.FieldViews:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field views", values[i])
			} else if value.Valid {
				e.Views = int(value.Int64)
			}
		case experience.FieldLikes:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field likes", values[i])
			} else if value.Valid {
				e.Likes = int(value.Int64)
			}
		case experience.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_posts", value)
			} else if value.Valid {
				e.user_posts = new(int)
				*e.user_posts = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryComments queries the "comments" edge of the Experience entity.
func (e *Experience) QueryComments() *CommentsQuery {
	return (&ExperienceClient{config: e.config}).QueryComments(e)
}

// QueryUser queries the "user" edge of the Experience entity.
func (e *Experience) QueryUser() *UserQuery {
	return (&ExperienceClient{config: e.config}).QueryUser(e)
}

// Update returns a builder for updating this Experience.
// Note that you need to call Experience.Unwrap() before calling this method if this Experience
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Experience) Update() *ExperienceUpdateOne {
	return (&ExperienceClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the Experience entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Experience) Unwrap() *Experience {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Experience is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Experience) String() string {
	var builder strings.Builder
	builder.WriteString("Experience(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", uuid=")
	builder.WriteString(fmt.Sprintf("%v", e.UUID))
	builder.WriteString(", created_at=")
	builder.WriteString(e.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", title=")
	builder.WriteString(e.Title)
	builder.WriteString(", content=")
	builder.WriteString(e.Content)
	builder.WriteString(", views=")
	builder.WriteString(fmt.Sprintf("%v", e.Views))
	builder.WriteString(", likes=")
	builder.WriteString(fmt.Sprintf("%v", e.Likes))
	builder.WriteByte(')')
	return builder.String()
}

// Experiences is a parsable slice of Experience.
type Experiences []*Experience

func (e Experiences) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
